package passProjec;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.regex.Pattern;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.logging.Logger;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;

class LoginAcct extends JFrame {

    private static final long serialVersionUID = 1L;
   // private JDialog displayAllDialog = null;
    private JFrame displayAllFrame = null;

	protected static final JTable TableModel = null;
	

    JPanel loginAcctPanel = new JPanel(new GridBagLayout());
    JLabel userNameLabel = new JLabel("Enter your username: ");
    JLabel passWordLabel1 = new JLabel("Enter your password: ");
    JTextField textFieldUserName = new JTextField(10);
    JPasswordField textFieldPassword = new JPasswordField(10);
    JButton loginAcctButton = new JButton("Login");
    JButton cancelLoginAcctButton = new JButton("Cancel");

    private static HashMap<String, String> accounts = new HashMap<>();

    public LoginAcct() {
        accounts = NewAccountManager.loadCredentials();
        loginComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(500, 300);
        setLocationRelativeTo(null);
        setTitle("Password Manager Program");
        setVisible(true);
    }

    private void loginComponents() {
        GridBagConstraints con = new GridBagConstraints();
        con.insets = new Insets(5, 5, 5, 5); // Top, Left, Bottom, Right

        con.gridx = 0; // set the column constraint to 0
        con.gridy = 0; // set the row constraint to 1
        con.anchor = GridBagConstraints.WEST; // Left align
        loginAcctPanel.add(userNameLabel, con); // add the label

        con.gridx = 1; // set the column constraint to 1
        con.anchor = GridBagConstraints.EAST; // Right align
        loginAcctPanel.add(textFieldUserName, con); // add the entry field
        textFieldUserName.setHorizontalAlignment(JTextField.LEFT);

        con.gridx = 0; // reset column
        con.gridy = 2; // move to the next row
        con.anchor = GridBagConstraints.EAST;
        loginAcctPanel.add(passWordLabel1, con);

        con.gridx = 1;
        con.anchor = GridBagConstraints.EAST;
        loginAcctPanel.add(textFieldPassword, con);
        textFieldPassword.setHorizontalAlignment(JTextField.LEFT);

        con.gridx = 0;
        con.gridy = 6;
        con.gridwidth = 2; // span across two columns
        con.anchor = GridBagConstraints.CENTER;
        loginAcctPanel.add(cancelLoginAcctButton, con);

        con.gridx = 0;
        con.gridy = 4;
        con.gridwidth = 2;
        con.anchor = GridBagConstraints.CENTER;
        loginAcctPanel.add(loginAcctButton, con);

        loginAcctButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String username = textFieldUserName.getText().toLowerCase();
                String password = new String(textFieldPassword.getPassword());
                String hashedPassword = NewAccountManager.hashPassword(password);

                if (accounts.containsKey(username) && accounts.get(username).equals(hashedPassword)) {
                    JOptionPane.showMessageDialog(null, "Login Success");
                    mainFrame();
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid username or password");
                }
            }
        });

        cancelLoginAcctButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                new Main().displayHomeScreen();
            }
        });
        add(loginAcctPanel);
    }
//    private JTextField descriptionField;
//    private JTextField userNameField;
//    private JPasswordField passwordField;
    
    private void mainFrame() {
        JFrame showMainFrame = new JFrame("Password Manager");
        showMainFrame.setDefaultCloseOperation(EXIT_ON_CLOSE);
        showMainFrame.setSize(800, 600);
        showMainFrame.setLocationRelativeTo(null);

        showMainFrame.setLayout(new BorderLayout());

        JPanel topPanel = new JPanel();
        topPanel.setLayout(new BorderLayout());

        JLabel title = new JLabel("Password Management System");
        title.setFont(new Font("Georgia", Font.BOLD, 27)); // Font
        topPanel.add(title, BorderLayout.CENTER);

        JButton logoutButton = new JButton("Logout");
        logoutButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (displayAllFrame != null) {
                    displayAllFrame.dispose();
                }
                showMainFrame.dispose();
                dispose();
                new Main().displayHomeScreen();
            }
        });
        topPanel.add(logoutButton, BorderLayout.EAST);

        try {
            BufferedImage img = ImageIO.read(new File("src/passmanager2.jpg"));
            ImageIcon icon = new ImageIcon(img);
            JLabel imgLabel = new JLabel(icon);
            topPanel.add(imgLabel, BorderLayout.SOUTH);
        } catch (IOException e) {
            JLabel imgLabel = new JLabel("Image not found");
            topPanel.add(imgLabel, BorderLayout.SOUTH);
        }


        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new GridBagLayout());

        GridBagConstraints con = new GridBagConstraints();
        con.insets = new Insets(5, 5, 5, 5); // Top, Left, Bottom, Right

        JLabel descriptionLabel = new JLabel("Enter the Description/Company: ");
        con.gridx = 0;
        con.gridy = 0;
        con.anchor = GridBagConstraints.LINE_END;
        centerPanel.add(descriptionLabel, con);

        JTextField descriptionField = new JTextField(20);
        con.gridx = 1;
        con.gridy = 0;
        con.anchor = GridBagConstraints.LINE_START;
        centerPanel.add(descriptionField, con);

        JLabel userNameLabel = new JLabel("Enter the user name: ");
        con.gridx = 0;
        con.gridy = 1;
        con.anchor = GridBagConstraints.LINE_END;
        centerPanel.add(userNameLabel, con);

        JTextField userNameField = new JTextField(20);
        con.gridx = 1;
        con.gridy = 1;
        con.anchor = GridBagConstraints.LINE_START;
        centerPanel.add(userNameField, con);

        JLabel passwordLabel = new JLabel("Enter the password: ");
        con.gridx = 0;
        con.gridy = 2;
        con.anchor = GridBagConstraints.LINE_END;
        centerPanel.add(passwordLabel, con);

        JPasswordField passwordField = new JPasswordField(20);
        con.gridx = 1;
        con.gridy = 2;
        con.anchor = GridBagConstraints.LINE_START;
        centerPanel.add(passwordField, con);

 

        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new FlowLayout());
        
        String username = textFieldUserName.getText().toLowerCase();
        
        final File passwordFile = new File("src/passwords_for_" + username + ".txt");
        
        Logger logger = Logger.getLogger(getClass().getName());

        JButton displayAllButton = new JButton("Display All");
        //JFrame =
        displayAllButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (passwordFile.exists() && passwordFile.length() > 0) {
                    try {
                        BufferedReader reader = new BufferedReader(new FileReader(passwordFile));
                        String line;
                        String[][] data = new String[1000][3]; // Initialize an array to hold the data
                        int rowIndex = 0;
                        while ((line = reader.readLine()) != null) {
                            String[] parts = line.split("\\|");
                            if (parts.length == 3) {
                                data[rowIndex][0] = parts[0]; // Business
                                data[rowIndex][1] = parts[1]; // User Name
                                data[rowIndex][2] = parts[2]; // Password
                                rowIndex++;
                            }
                        }

                        // Sort the data alphabetically by company
                        String[][] sortedData = new String[rowIndex][3];
                        System.arraycopy(data, 0, sortedData, 0, rowIndex);
                        for (int i = 0; i < rowIndex; i++) {
                            for (int j = i + 1; j < rowIndex; j++) {
                                if (sortedData[i][0].compareToIgnoreCase(sortedData[j][0]) > 0) {
                                    String[] temp = sortedData[i];
                                    sortedData[i] = sortedData[j];
                                    sortedData[j] = temp;
                                }
                            }
                        }

                        String[] columnNames = {"Business", "User Name", "Password"};
                        DefaultTableModel tableModel = new DefaultTableModel(sortedData, columnNames);
                        JTable table = new JTable(tableModel) {
                            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                                Component component = super.prepareRenderer(renderer, row, column);
                                if (component instanceof JComponent) {
                                    ((JComponent) component).setBackground(Color.YELLOW);
                                }
                                return component;
                            }
                        };

                        JTableHeader header = table.getTableHeader();
                        header.setFont(new Font("Arial", Font.BOLD, 14));
                        header.setForeground(Color.BLACK);
                        header.setBackground(Color.YELLOW);

                        JScrollPane scrollPane = new JScrollPane(table);
                        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
                        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

                        displayAllFrame = new JFrame("Account Information");
                        displayAllFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        displayAllFrame.add(scrollPane);
                        displayAllFrame.setSize(800, 600);
                        displayAllFrame.setVisible(true);

//                        JButton refreshButton = new JButton("Refresh");
//                        displayAllFrame.add(refreshButton, BorderLayout.SOUTH);
//                        refreshButton.addActionListener(new ActionListener() {
//                            public void actionPerformed(ActionEvent e) {
//                                // Refresh the table model
//                                displayAllFrame.dispose();
//                                displayAllButton.doClick();
//                            }
//                        });
                    } catch (IOException ex) {
                        System.out.println("Event: " + e.toString());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No data to display");
                }
            }
        });

        JButton addButton = new JButton("Update");
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String company = descriptionField.getText();
                String username = userNameField.getText();
                String password = new String(passwordField.getPassword());

                if (company.isEmpty() || username.isEmpty() || password.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please fill in all fields");
                    return;
                }

                boolean duplicateFound = false;
                try {
                    BufferedReader reader = new BufferedReader(new FileReader(passwordFile));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        if (parts.length == 3 && parts[0].toLowerCase().equals(company.toLowerCase())) {
                            duplicateFound = true;
                            break;
                        }
                    }
                    reader.close();
                } catch (IOException ex) {
                    System.out.println("Event: " + e.toString());
                }

                if (duplicateFound) {
                    int result = JOptionPane.showConfirmDialog(null, "A company with this name already exists. Do you want to update the entry?", "Confirm", JOptionPane.YES_NO_OPTION);
                    if (result == JOptionPane.YES_OPTION) {
                        try {
                            StringBuilder lines = new StringBuilder();
                            BufferedReader reader = new BufferedReader(new FileReader(passwordFile));
                            String line;
                            while ((line = reader.readLine()) != null) {
                                String[] parts = line.split("\\|");
                                if (parts.length == 3) {
                                    if (parts[0].equals(company)) {
                                        lines.append(company + "|" + username + "|" + password).append("\n");
                                    } else {
                                        lines.append(line).append("\n");
                                    }
                                }
                            }
                            BufferedWriter writer = new BufferedWriter(new FileWriter(passwordFile));
                            writer.write(lines.toString());
                            writer.close();
                            JOptionPane.showMessageDialog(null, "The data for \"" + company + "\" has been updated successfully!");

                            // Update the DefaultTableModel
                            if (displayAllFrame != null) {
                                JScrollPane scrollPane = (JScrollPane) displayAllFrame.getContentPane().getComponent(0);
                                JTable table = (JTable) scrollPane.getViewport().getView();
                                DefaultTableModel tableModel = (DefaultTableModel) table.getModel();

                                String[][] data = new String[tableModel.getRowCount()][3];
                                for (int i = 0; i < tableModel.getRowCount(); i++) {
                                    data[i][0] = (String) tableModel.getValueAt(i, 0);
                                    data[i][1] = (String) tableModel.getValueAt(i, 1);
                                    data[i][2] = (String) tableModel.getValueAt(i, 2);
                                }

                                // Remove the existing entry
                                String[][] newData = new String[data.length + 1][3];
                                int pos = 0;
                                boolean found = false;
                                for (int i = 0; i < data.length; i++) {
                                    if (!found && company.toLowerCase().compareTo(data[i][0].toLowerCase()) < 0) {
                                        newData[pos][0] = company;
                                        newData[pos][1] = username;
                                        newData[pos][2] = password;
                                        pos++;
                                        found = true;
                                    }
                                    newData[pos][0] = data[i][0];
                                    newData[pos][1] = data[i][1];
                                    newData[pos][2] = data[i][2];
                                    pos++;
                                }

                                if (!found) {
                                    newData[newData.length - 1][0] = company;
                                    newData[newData.length - 1][1] = username;
                                    newData[newData.length - 1][2] = password;
                                }

                                // Clear the table model
                                tableModel.setRowCount(0);
                                for (int i = 0; i < newData.length; i++) {
                                    tableModel.addRow(newData[i]);
                                }
                            }
                        } catch (IOException ex) {
                        	System.out.println("Event: " + e.toString());
                        }
                    }
                } else {
                    try {
                        BufferedWriter writer = new BufferedWriter(new FileWriter(passwordFile, true));
                        writer.write(company + "|" + username + "|" + password + "\n");
                        writer.close();
                        JOptionPane.showMessageDialog(null, "The data for \"" + company + "\" has been added successfully!");

                        if (displayAllFrame != null) {
                            JScrollPane scrollPane = (JScrollPane) displayAllFrame.getContentPane().getComponent(0);
                            JTable table = (JTable) scrollPane.getViewport().getView();
                            DefaultTableModel tableModel = (DefaultTableModel) table.getModel();

                            int pos = 0;
                            while (pos < tableModel.getRowCount() && ((String) tableModel.getValueAt(pos, 0)).compareTo(company) < 0) {
                                pos++;
                            }

                            tableModel.insertRow(pos, new Object[] { company, username, password });
                        }
                    } catch (IOException ex) {
                        System.out.println("Event: " + e.toString());
                    }
                }
            }
        });
        JButton searchButton = new JButton("Search");
        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String searchCompany = JOptionPane.showInputDialog(null, "Enter the company to search for:");
                if (searchCompany.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter a company");
                    return;
                }

                // find the account information~test
                boolean found = false;
                String company = "";
                String username = "";
                String password = "";
                try {
                    BufferedReader reader = new BufferedReader(new FileReader(passwordFile));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        if (parts.length == 3) {
                            if (parts[0].toLowerCase().equals(searchCompany.toLowerCase())) {
                                company = parts[0];
                                username = parts[1];
                                password = parts[2];
                                found = true;
                                break;
                            }
                        }
                    }
                } catch (IOException ex) {
                    System.out.println("Event: " + e.toString());
                }

                if (!found) {
                    JOptionPane.showMessageDialog(null, "Account associated with company NOT found");
                    return;
                }

                JDialog accountInfoDialog = new JDialog(showMainFrame, "Account Information", false);
                accountInfoDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                accountInfoDialog.setLayout(new GridBagLayout());

                GridBagConstraints con = new GridBagConstraints();
                con.insets = new Insets(5, 5, 5, 5);

                con.gridx = 0;
                con.gridy = 0;
                con.gridwidth = 2;
                con.anchor = GridBagConstraints.CENTER;
                accountInfoDialog.add(new JLabel("Company: " + company), con);

                con.gridy = 1;
                accountInfoDialog.add(new JLabel("Username: " + username), con);

                con.gridy = 2;
                accountInfoDialog.add(new JLabel("Password: " + password), con);

                con.gridx = 0;
                con.gridy = 3;
                con.gridwidth = 1;
                JButton doneButton = new JButton("Done");
                accountInfoDialog.add(doneButton, con);

                con.gridx = 1;
                JButton removeButton = new JButton("Remove");
                accountInfoDialog.add(removeButton, con);

                con.gridx = 2;
                con.gridy = 3;
                con.anchor = GridBagConstraints.CENTER;
                JButton searchAgainButton = new JButton("Search Again");
                accountInfoDialog.add(searchAgainButton, con);

                doneButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        accountInfoDialog.dispose();
                    }
                });

                final String companyId = company;
                removeButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this entry?", "Confirm", JOptionPane.YES_NO_OPTION);
                        if (result == JOptionPane.YES_OPTION) {
                            try {
                                BufferedReader reader = new BufferedReader(new FileReader(passwordFile));
                                StringBuilder lines = new StringBuilder();
                                String line;
                                boolean found = false;
                                while ((line = reader.readLine()) != null) {
                                    String[] parts = line.split("\\|");
                                    if (parts.length == 3) {
                                        if (!parts[0].equals(companyId)) {
                                            lines.append(line).append("\n");
                                        } else {
                                            found = true;
                                        }
                                    }
                                }
                                if (found) {
                                    BufferedWriter writer = new BufferedWriter(new FileWriter(passwordFile));
                                    writer.write(lines.toString());
                                    writer.close();
                                    JOptionPane.showMessageDialog(null, "Entry deleted successfully");

                                    // Update the DefaultTableModel
                                    if (displayAllFrame != null) {
                                        JScrollPane scrollPane = (JScrollPane) displayAllFrame.getContentPane().getComponent(0);
                                        JTable table = (JTable) scrollPane.getViewport().getView();
                                        DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
                                        for (int i = 0; i < tableModel.getRowCount(); i++) {
                                            if (tableModel.getValueAt(i, 0).equals(companyId)) {
                                                tableModel.removeRow(i);
                                                break;
                                            }
                                        }
                                    }
                                    accountInfoDialog.dispose();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Entry not found");
                                }
                            } catch (IOException ex) {
                                System.out.println("Event: " + e.toString());
                            }
                        }
                    }
                });

                searchAgainButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        accountInfoDialog.dispose();
                        searchButton.doClick();
                    }
                });

                accountInfoDialog.setSize(400, 200);
                accountInfoDialog.setVisible(true);
            }
        });

        showMainFrame.add(topPanel, BorderLayout.NORTH);
        showMainFrame.add(centerPanel, BorderLayout.CENTER);
        showMainFrame.add(bottomPanel, BorderLayout.SOUTH);
        bottomPanel.add(displayAllButton);
        bottomPanel.add(searchButton);
        bottomPanel.add(addButton);

        showMainFrame.setVisible(true);
    }
}

